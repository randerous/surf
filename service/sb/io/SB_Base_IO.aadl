package SB_Base_IO
public
	with Core_Types;
	with Base_Types;
	
	--------all feature groups can add "in|out data port [type];" corresponding to its direction and data type
------------------------------Pipe---------------------------------
	feature group PipeOutput
		features
			ES_CmdPipe: out data port Core_Types::struct.CFE_SB_PipeD_t;
			SB_CmdPipe: out data port Core_Types::struct.CFE_SB_PipeD_t;
			EVS_CmdPipe: out data port Core_Types::struct.CFE_SB_PipeD_t;
			TIME_CmdPipe: out data port Core_Types::struct.CFE_SB_PipeD_t;
			HS_CmdPipe: out data port Core_Types::struct.CFE_SB_PipeD_t;
	end PipeOutput;

	feature group PipeInput
		features   
			ES_CmdPipe: in data port Core_Types::struct.CFE_SB_PipeD_t;
			SB_CmdPipe: in data port Core_Types::struct.CFE_SB_PipeD_t;
			EVS_CmdPipe: in data port Core_Types::struct.CFE_SB_PipeD_t;
			TIME_CmdPipe: in data port Core_Types::struct.CFE_SB_PipeD_t;
			HS_CmdPipe: in data port Core_Types::struct.CFE_SB_PipeD_t;
	inverse of PipeOutput
	end PipeInput;

--    for return value
---   UnCalled: -1;
--    SUCCESS:0
--    SB_BAD_ARGUMENT:3 
--we just need a sign to determine whether cmd is create or del,
--so just need add a bool value sign to express it.

	feature group PipeReturnValue
		features
--			No supporting for concurrent calls to CreatePipe, No need to distinguish them .
			
--			ES_CmdPipe: out data port Base_Types::Integer;
--			SB_CmdPipe: out data port Base_Types::Integer;
--			EVS_CmdPipe: out data port Base_Types::Integer;
--			TIME_CmdPipe: out data port Base_Types::Integer;
--			
			Modified_PipeId: out data port Base_Types::Integer;
			Cmd_Called: out data port Base_Types::Integer;
	end PipeReturnValue;

---awfully bad name, evaluateValue, 
---actually, just the return value on whether cmd is executed successfully
	feature group PipeEvaluteValue
		features
--			ES_CmdPipe: in data port Base_Types::Integer;
--			SB_CmdPipe: in data port Base_Types::Integer;
--			EVS_CmdPipe: in data port Base_Types::Integer;
--			TIME_CmdPipe: in data port Base_Types::Integer;
			Modified_PipeId: in data port Base_Types::Integer;
			Cmd_Called: in data port Base_Types::Integer;
	inverse of PipeReturnValue
	end PipeEvaluteValue;


--route should record each subscription enrty for all msg
--for implementing route table
--we should cut msgId into three classes
--MsgId 0: for event
--MsgId 1: for core app's msg 
--MsgId 2: for sample app's msg
------------------------------Route---------------------------------
	feature group RouteOutput
		features
--			ES_CmdPipe_ES_Command: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
--			SB_CmdPipe_SB_Command: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
--			EVS_CmdPipe_EVS_Command: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
--			TIME_CmdPipe_TIME_Command: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
			Event_Router: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
			Core_Msg_Router: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
			Common_Msg_Router: out data port Core_Types::struct.CFE_SB_RouteEntry_t;
	end RouteOutput;

	feature group RouteInput
		features
			Event_Router: in data port Core_Types::struct.CFE_SB_RouteEntry_t;
			Core_Msg_Router: in data port Core_Types::struct.CFE_SB_RouteEntry_t;
			Common_Msg_Router: in data port Core_Types::struct.CFE_SB_RouteEntry_t;
	inverse of RouteOutput
	end RouteInput;
	
	feature group RouteReturnValue
		features
--			ES_CmdPipe_ES_Command: out data port Base_Types::Integer;
--			SB_CmdPipe_SB_Command: out data port Base_Types::Integer;
--			EVS_CmdPipe_EVS_Command: out data port Base_Types::Integer;
--			TIME_CmdPipe_TIME_Command: out data port Base_Types::Integer;
			Modified_RouteId: out data port Base_Types::Integer;
			Cmd_Called: out data port Base_Types::Integer;
	end RouteReturnValue;

	feature group RouteEvaluteValue
		features
--			ES_CmdPipe_ES_Command: in data port Base_Types::Integer;
--			SB_CmdPipe_SB_Command: in data port Base_Types::Integer;
--			EVS_CmdPipe_EVS_Command: in data port Base_Types::Integer;
--			TIME_CmdPipe_TIME_Command: in data port Base_Types::Integer;
			Modified_RouteId: in data port Base_Types::Integer;
			Cmd_Called: in data port Base_Types::Integer;
	inverse of RouteReturnValue
	end RouteEvaluteValue;
end SB_Base_IO;