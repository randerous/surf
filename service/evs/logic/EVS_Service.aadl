package EVS_Service
public
	with EVS_Processor;
	with EVS_Arg_IO;
	with EVS_Result_IO;
	with EVS_Base_IO;
--	with EVS_Route_Table;
--	with SB_Arg_IO;

	abstract Service
		features
			RegisterArgs: feature group EVS_Arg_IO::RegisterArgs;
			UnregisterArgs: feature group EVS_Arg_IO::UnregisterArgs;
			SendEventArgs: feature group EVS_Arg_IO::SendEventArgs;
			
			OutEvents: feature group EVS_Arg_IO::OutEvtArgs;
		annex agree{**
			assume "No register and unregister at the same time":
			not(RegisterArgs.a.Activiated = true  and UnregisterArgs.a.Activiated = true );
			
			guarantee "deliver restartApp event":
			OutEvents.Activiated = false
			  ->
			if(SendEventArgs.Activiated = true 
			and SendEventArgs.EvtPacket.Msg.MsgId = 0 
			and SendEventArgs.EvtPacket.Msg.EvtId = 0
			)
			then(OutEvents.Activiated = true and 
				OutEvents.EvtPacket.Msg.MsgId = 0 and 
				OutEvents.EvtPacket.Msg.EvtId = 0
			)
			else OutEvents.Activiated = false ;
		**};
	end Service;

	abstract implementation Service.impl
		subcomponents
			Register: abstract EVS_Processor::Register;
			Unregister: abstract EVS_Processor::Unregister;
			SendEvent: abstract EVS_Processor::SendEvent;
			ShareData: abstract ShareData;
		connections
			RegisterArg: feature group RegisterArgs <-> Register.Args;
			RegisterLocalData: feature group ShareData.AppData -> Register.LocalDatas;
			RegisterResult: feature group Register.Results -> ShareData.RegisterResult;
			
			UnregisterArg: feature group UnregisterArgs <-> Unregister.Args;
			UnregisterLocalData: feature group ShareData.AppData -> Unregister.LocalDatas;
			UnregisterResult: feature group Unregister.Results -> ShareData.UnregisterResult;
			
			SendEventArg: feature group SendEventArgs <-> SendEvent.Args;
			SendEventLocalData: feature group ShareData.AppData -> SendEvent.LocalDatas;
			SendEventResult: feature group SendEvent.Results <-> ShareData.SendEventResult;
			SendEventOutEvent: feature group SendEvent.OutEvents -> OutEvents;
		annex agree{**
--			lemma " true": true;
		**};

	end Service.impl;

----------------ShareData can add processor result
	abstract ShareData
		features
--			OldFilterData: feature group EVS_Base_IO::FilterOutput;
			AppData: feature group EVS_Base_IO::AppDataOutput;			
			RegisterResult: feature group EVS_Result_IO::RegisterResult;
			UnregisterResult: feature group EVS_Result_IO::UnregisterResult;
			SendEventResult: feature group EVS_Result_IO::SendEventResult;
		annex agree{**
			eq SUCCESS : int = 0;

			guarantee "manage es filter":AppData.ES.RegisterFlag = false ->  
			((RegisterResult.EvaluteValue.Cmd_Called = -1 and 
			UnregisterResult.EvaluteValue.Cmd_Called = -1) 
			=> AppData.ES = pre(AppData.ES))
			and 
			((RegisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 0
			) => AppData.ES = RegisterResult.Input.ES)
			and 
			((UnregisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 0
			) => AppData.ES.RegisterFlag = False);
			
			
			guarantee "manage sb filter":AppData.SB.RegisterFlag = false ->  
			((RegisterResult.EvaluteValue.Cmd_Called = -1 and 
			UnregisterResult.EvaluteValue.Cmd_Called = -1) 
			=> AppData.SB = pre(AppData.SB))
			and 
			((RegisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 1
			) => AppData.SB = RegisterResult.Input.SB)
			and 
			((UnregisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 1
			) => AppData.SB.RegisterFlag = False);
			
			
			guarantee "manage evs filter":AppData.SB.RegisterFlag = false ->  
			((RegisterResult.EvaluteValue.Cmd_Called = -1 and 
			UnregisterResult.EvaluteValue.Cmd_Called = -1) 
			=> AppData.EVS = pre(AppData.EVS))
			and 
			((RegisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 2
			) => AppData.EVS = RegisterResult.Input.EVS)
			and 
			((UnregisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 2
			) => AppData.EVS.RegisterFlag = False);
			
			guarantee "manage time filter":AppData.SB.RegisterFlag = false ->  
			((RegisterResult.EvaluteValue.Cmd_Called = -1 and 
			UnregisterResult.EvaluteValue.Cmd_Called = -1) 
			=> AppData.TIME1 = pre(AppData.TIME1))
			and 
			((RegisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 3
			) => AppData.TIME1 = RegisterResult.Input.TIME1)
			and 
			((UnregisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 3
			) => AppData.TIME1.RegisterFlag = False);
			
			
			guarantee "manage hs filter":AppData.SB.RegisterFlag = false ->  
			((RegisterResult.EvaluteValue.Cmd_Called = -1 and 
			UnregisterResult.EvaluteValue.Cmd_Called = -1) 
			=> AppData.HS = pre(AppData.HS))
			and 
			((RegisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 5
			) => AppData.HS = RegisterResult.Input.HS)
			and 
			((UnregisterResult.EvaluteValue.Cmd_Called = SUCCESS 
				and RegisterResult.EvaluteValue.Modified_Id = 5
			) => AppData.HS.RegisterFlag = False);
			
		**};
	end ShareData;
end EVS_Service;