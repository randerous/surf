package Core
public
	with Core_Sugar;
	with SB_Service;
	with EVS_Service;
	with ES_Service;
	with TIME_Service;
	
	with EVS_Arg_IO;
	with ES_Arg_IO;
	with SB_Arg_IO;
	with TIME_Arg_IO;
	
	with SB_Route_Table;
	with ES_Base_IO;
	
	with SB_Interface;
	abstract Core
		features
			ESAPI: feature group ESAPI;
			EVSAPI: feature group EVSAPI;
			SBAPI: feature group SBAPI;
			TIMEAPI: feature group TIMEAPI;
			
			MsgOutput: feature group SB_Route_Table::RouteOutput;
			
			AppRecord: feature group ES_Base_IO::AppRecordOutput;
		annex agree{**
				--assume for sb
			-- we use lock to sychronize the operation to shared data,such as Pipe info and Route info
				assume "No Create and Delete pipe at the same time": not(SBAPI.CreatePipeArgs.a.Activiated = true
					and SBAPI.DeletePipeArgs.a.Activiated = true
				);
				
				assume "No Subscribe and UnSubscribe at the same time": not(SBAPI.SubscribeArgs.a.Activiated = true
					and SBAPI.UnsubscribeArgs.a.Activiated = true
				);
				assume "Send Evt or Msg": not (SBAPI.MsgInput.Activiated = true and EVSAPI.SendEventArgs.Activiated = true);
				--hs subscribe event always
				eq HS_CANCEL_SUB_EVENT : bool =  (
					SBAPI.UnsubscribeArgs.a.Activiated = true 
					and SBAPI.UnsubscribeArgs.a.PipeId = 5
					and SBAPI.UnsubscribeArgs.a.MsgId = 0
				);
				eq DEL_HS_PIPE : bool =  (SBAPI.DeletePipeArgs.a.Activiated = true and SBAPI.DeletePipeArgs.a.AppId = 5);
				
				--initially, we set the pipe for hs active,and make it subscribe event, and keep it  on
				assume "keep hs monitoring event": 
				(
					(SBAPI.CreatePipeArgs.a.Activiated = true and SBAPI.CreatePipeArgs.a.AppId = 5) and 
					(SBAPI.SubscribeArgs.a.Activiated = true and SBAPI.SubscribeArgs.a.MsgId = 0 and SBAPI.SubscribeArgs.a.PipeId = 5)
				) -> not(HS_CANCEL_SUB_EVENT or DEL_HS_PIPE);
				
				--assumes for evs
				assume "No register and unregister at the same time":
			    not(EVSAPI.RegisterArgs.a.Activiated = true  and EVSAPI.UnregisterArgs.a.Activiated = true );
				
				
				--assumes for es	
				--we use lock to sychronize the operation to shared data,such as Pipe info and Route info
				--for initial stage, forbid all func call,(still prepared)
				assume "initialize all func":(ESAPI.RegisterAppArgs.a.Activiated = false
					and ESAPI.DeleteAppArgs.a.Activiated = false
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false) -> true;
					
				assume "No two of Register and Delete  and Restart at the same time": 
				(	
					ESAPI.RegisterAppArgs.a.Activiated = true
					and ESAPI.DeleteAppArgs.a.Activiated = false
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or 
				(	
					ESAPI.RegisterAppArgs.a.Activiated = false
					and ESAPI.DeleteAppArgs.a.Activiated = true
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or 
				(	
					ESAPI.RegisterAppArgs.a.Activiated = false
					and ESAPI.DeleteAppArgs.a.Activiated = false
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = true
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or
				(	
					ESAPI.RegisterAppArgs.a.Activiated = false
					and ESAPI.DeleteAppArgs.a.Activiated = false
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = true
				)
				or
				(	
					ESAPI.RegisterAppArgs.a.Activiated = false
					and ESAPI.DeleteAppArgs.a.Activiated = false
					and ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				);
				
	
			   guarantee "Time goes": TIMEAPI.GetTimeArgs.a.CurrentTime.Seconds = (0 ->  
				 pre(TIMEAPI.GetTimeArgs.a.CurrentTime.Seconds)+1);
				 
			   --here the property maybe need some lemmas , 
				guarantee "Hs should get all event": true -> 
				(
					(SBAPI.MsgInput.Activiated = true  and SBAPI.MsgInput.a.Msg.MsgId = 0) 
					or (EVSAPI.SendEventArgs.Activiated = true and EVSAPI.SendEventArgs.EvtPacket.Msg.MsgId = 0 
						and EVSAPI.SendEventArgs.EvtPacket.Msg.EvtId = 0 
					)
					=> MsgOutput.HS_CmdPipe_HS_Command.MsgId = 0
				);

	          --0: running 1: restart, 2:waiting, 4: initializing
		 		 eq waitting: int = 2;
		 		 eq running: int = 0;
		 		guarantee "restart app": true -> 
		 		 ESAPI.RestartAppArgs.ES_RestartApp.Activiated = true and  ESAPI.RestartAppArgs.ES_RestartApp.AppId  = 5 and
		 		 pre(AppRecord.HS_APP.StateRecord.AppState = running)
		 		=>  AppRecord.HS_APP.StateRecord.AppState = waitting;
			 
		**};
	end Core;
	
	abstract implementation Core.impl
		subcomponents
			SB: abstract SB_Service::Service.impl;
			EVS: abstract EVS_Service::Service.impl;
			ES: abstract ES_Service::Service.impl;
			TIME: abstract TIME_Service::Service.impl;
--			Medium: abstract Core_Sugar::Medium;--medium is useless
		connections
			RegisterApp: feature group ESAPI.RegisterAppArgs -> ES.RegisterAppArgs;
			RestartApp: feature group ESAPI.RestartAppArgs -> ES.RestartAppArgs;
			DeleteApp: feature group ESAPI.DeleteAppArgs -> ES.DeleteAppArgs;
--			
			CreatePipe: feature group SBAPI.CreatePipeArgs -> SB.CreatePipeArgs;
			DeletePipe: feature group SBAPI.DeletePipeArgs -> SB.DeletePipeArgs;
			Subscribe: feature group SBAPI.SubscribeArgs -> SB.SubscribeArgs;
			Unsubscribe: feature group SBAPI.UnsubscribeArgs -> SB.UnsubscribeArgs;
			SendMsg: feature group SBAPI.MsgInput <-> SB.SendMsgArgs;
			
			DeliverEvt: feature group EVS.OutEvents <-> SB.SendEvtArgs;
			
			Register: feature group EVSAPI.RegisterArgs -> EVS.RegisterArgs;
			Unregister: feature group EVSAPI.UnregisterArgs -> EVS.UnregisterArgs;
			SendEvent: feature group EVSAPI.SendEventArgs -> EVS.SendEventArgs;
			
			GetTime: feature group TIMEAPI.GetTimeArgs -> TIME.GetTimeArgs;
			 
			MsgOutputConnection: feature group SB.OutMsgs -> MsgOutput;
			
			-----------------------Data output----------------------
			AppRecordOutput: feature group ES.AppRecord -> AppRecord;
--			
--			
			
			--------------Medium Example------------
--			Msg_a_Input: feature group Medium.MsgOutput <-> SB.SendMsgArgs.a;
			
--			--------------Event Example---------------

--			ES_CC1_ERR: feature group EVS.OutEvents.ES_CC1_ERR <-> SB.SendMsgArgs.ES_CC1_ERR;
--			ES_RESTART_APP_ERR: feature group EVS.OutEvents.ES_RESTART_APP_ERR <-> SB.SendMsgArgs.ES_RESTART_APP_ERR;
--			SB_BAD_CMD_CODE: feature group EVS.OutEvents.SB_BAD_CMD_CODE <-> SB.SendMsgArgs.SB_BAD_CMD_CODE;
--			EVS_ERR_MSGID: feature group EVS.OutEvents.EVS_ERR_MSGID <-> SB.SendMsgArgs.EVS_ERR_MSGID;
--			TIME_CC_ERR: feature group EVS.OutEvents.TIME_CC_ERR <-> SB.SendMsgArgs.TIME_CC_ERR;
			
	end Core.impl;
	
	feature group ESAPI
		features
			RegisterAppArgs: feature group ES_Arg_IO::RegisterAppArgs;
			RestartAppArgs: feature group ES_Arg_IO::RestartAppArgs;
			DeleteAppArgs: feature group ES_Arg_IO::DeleteAppArgs;
	end ESAPI;
	
	feature group EVSAPI
		features
			RegisterArgs: feature group EVS_Arg_IO::RegisterArgs;
			UnregisterArgs: feature group EVS_Arg_IO::UnregisterArgs;
			SendEventArgs: feature group EVS_Arg_IO::SendEventArgs;
	end EVSAPI;
	
	feature group SBAPI
		features
			CreatePipeArgs: feature group SB_Arg_IO::CreatePipeArgs;
			DeletePipeArgs: feature group SB_Arg_IO::DeletePipeArgs;
			SubscribeArgs: feature group SB_Arg_IO::SubscribeArgs;
			UnsubscribeArgs: feature group SB_Arg_IO::UnsubscribeArgs;
			MsgInput: feature group SB_Arg_IO::SendMsgArgs;
	end SBAPI;
	
	feature group TIMEAPI
		features
			GetTimeArgs: feature group TIME_Arg_IO::GetTimeArgs;
	end TIMEAPI;
	
end Core;