package Surf
public
	with Core;
	with ES_App;
	with SB_App;
	with EVS_App;
	with TIME_App;
	with HS_App;
	with Sample_App;
	with Surf_Medium;
	with CI_APP;
	with TO_APP;
	with Core_Types;
	
		
	process Surf
	features
			GroundCommand: in data port Core_Types::Base_struct.SURF_SB_Msg_t;
			TelemetryOutput: out data port Core_Types::Base_struct.SURF_SB_Msg_t;
	
	-- no real meaning, just AGREE tool needs annex clause in component type
	annex agree{**
 
	**};
	end Surf;
	
	process implementation Surf.impl
		subcomponents
			Core: abstract Core::Core.impl;
			ES: thread ES_App::ESAPP;
			SB: thread SB_App::SBAPP;
			EVS: thread EVS_App::EVSAPP;
			TIME: thread TIME_App::TIMEApp;
			HS: thread HS_App::HSApp;
			Sample: thread Sample_App::SampleApp;
			CI: thread CI_APP::CIAPP;
			TO_APP: thread TO_APP::TOAPP;
			
			Medium: abstract Surf_Medium::Medium;
			ESAPIAgent: abstract Surf_Medium::ESAPIAgent;
		connections
			---------------------core data provide---------------------------
			ES_AppRecord: feature group Core.AppRecord -> ES.AppRecord;
			HS_AppRecord: feature group Core.AppRecord -> HS.AppRecord;
			
			----------------------------Control command---------------------
			HS_Control: port ES.HSControlCommand -> HS.ControlCommand;
			
			---------------------------Medium--------------------------------
			MediumIn: feature group Core.MsgOutput -> Medium.MsgInput;
			
			---------------------------restart cmd---------------------------
			HS_Mon:  feature group HS.ESAPI -> ESAPIAgent.HS_Restart;
			ES_Mon:  feature group ES.ESAPI -> ESAPIAgent.ES_Restart;
			
			----------------------------Msg----------------------------------
			ES_Command: port Medium.ES_CmdPipe_ES_Command -> ES.Command;
			SB_Command: port Medium.SB_CmdPipe_SB_Command -> SB.Command;
			EVS_Command: port Medium.EVS_CmdPipe_EVS_Command -> EVS.Command;
			TIME_Command: port Medium.TIME_CmdPipe_TIME_Command -> TIME.Command;
			HS_Command: port Medium.HS_CmdPipe_HS_Command -> HS.Command;
			TO_Command: port Medium.TO_CmdPipe_TO_Command -> TO_APP.Command;

			CI_GroundCommand: port GroundCommand -> CI.Command;
			TelemetryOutput1: port TO_APP.TelemetryOutput -> TelemetryOutput;

			CI_Run: feature group CI.ESAPI <-> ESAPIAgent.CI_Run;
			TO_Run: feature group TO_APP.ESAPI <-> ESAPIAgent.TO_Run; 
			RunInfo: feature group ESAPIAgent.ESAPI <-> Core.ESAPI;
		
			annex agree{**
			--0: running 1: restart   2: wait
			--
			eq SUCCESS: int = 0;
			eq ERR_APPID: int = 1;--AppId
			
			eq INVALID_PIPE: int = 2;--
			eq BAD_ARGUMENT: int = 3;--
			eq MAX_PIPES_MET: int = 4;--
			eq PIPE_CR_ERR: int = 5;--
			
			eq MAX_MSGS_MET: int = 6;--
			eq MAX_DESTS_MET: int = 7;--
			eq BUF_ALOC_ERR: int = 8;--
			
			eq MSG_TOO_BIG: int = 9;
			
			eq APP_ILLEGAL_APP_ID: int = 10;-- 
			eq UNKNOWN_FILTER: int = 11;--
			eq ERR_BUFFER: int = 12;--
			
			eq APP_NOT_REGISTERED: int = 13; --=
			
			eq NO_MESSAGE: int = 14; --
			eq TIME_OUT: int = 15;--
			eq PIPE_RD_ERR: int = 16;--
			--MonitorApplications
			--there should be more monitor threads running at same time
			--need to control concurrency for all monitors!!!
			
			eq EVS_ERROR: int = 3;
			eq ERR_REPORT: int = 5;
			

	
			
			lemma "hs monitor event, send error Msg for reporting": 
			true -> 
			(	
				(HS.Command.MsgId = 0 and HS.Command.EvtId = EVS_ERROR)
				=> HS.EVSAPI.SendEventArgs.Default.Msg.EvtId = ERR_REPORT
 
			);
			
			lemma "monitor es, send a cmd to restart es whenever es stuck": true-> 
			(HS.TaskRecord.ES.ExecutionCounter = pre(HS.TaskRecord.ES.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 0;
			
			lemma "monitor sb, send a cmd to restart sb whenever sb stuck": true-> 
			(HS.TaskRecord.SB.ExecutionCounter = pre(HS.TaskRecord.SB.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 1;
			
			lemma "monitor evs, send a cmd to restart evs whenever evs stuck": true-> 
			(HS.TaskRecord.EVS.ExecutionCounter = pre(HS.TaskRecord.EVS.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 2;
			
			lemma "monitor TIME, send a cmd to restart TIME whenever TIME stuck": true-> 
			(HS.TaskRecord.TIME1.ExecutionCounter = pre(HS.TaskRecord.TIME1.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 3;
					
			lemma "monitor HS_APP, send a cmd to restart HS_APP whenever HS_APP stuck": true-> 
			(HS.TaskRecord.HS_APP.ExecutionCounter = pre(HS.TaskRecord.HS_APP.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 5;
			
			
			eq SYS_START : int = 5;
			lemma "monitor CI_APP, send a cmd to restart CI_APP whenever CI_APP stuck": true-> 
			((HS.TaskRecord.CI_APP.ExecutionCounter = pre(HS.TaskRecord.CI_APP.ExecutionCounter)) 
			and pre(Core.AppRecord.CI_APP.StateRecord.AppState = running))
		 		=>  Core.AppRecord.CI_APP.StateRecord.AppControlRequest = SYS_START;
		 		
		    lemma "restart CI_APP whenever CI_APP stuck": true-> 
			(pre(Core.AppRecord.CI_APP.StateRecord.AppState) = running 
			and pre( Core.AppRecord.CI_APP.StateRecord.AppControlRequest = SYS_START))
		 		=>  Core.AppRecord.CI_APP.StateRecord.AppState = waitting ;
			
			lemma "monitor TO_APP, send a cmd to restart TO_APP whenever TO_APP stuck": true-> 
			(HS.TaskRecord.TO_APP.ExecutionCounter = pre(HS.TaskRecord.TO_APP.ExecutionCounter)) =>
			HS.ESAPI.RestartAppArgs.MonitorApplications_SB.AppId = 7;
 			
			lemma "Time goes": Core.TIMEAPI.GetTimeArgs.a.CurrentTime.Seconds = (0 ->  
				 pre(Core.TIMEAPI.GetTimeArgs.a.CurrentTime.Seconds)+1);
			 
			lemma "Hs should get all event": true -> 
				(
					(Core.SBAPI.MsgInput.Activiated = true  and Core.SBAPI.MsgInput.a.Msg.MsgId = 0) 
					or (Core.EVSAPI.SendEventArgs.Activiated = true and Core.EVSAPI.SendEventArgs.EvtPacket.Msg.MsgId = 0 
						and Core.EVSAPI.SendEventArgs.EvtPacket.Msg.EvtId = 0 
					)
					=> HS.Command.MsgId = 0
				);
			--0: running 1: restart, 2:waiting, 4: initializing
		 	eq waitting: int = 2;
		 	eq running: int = 0;
 
		    --assume for sb
			-- we use lock to sychronize the operation to shared data,such as Pipe info and Route info
				assert "No Create and Delete pipe at the same time": not(Core.SBAPI.CreatePipeArgs.a.Activiated = true
					and Core.SBAPI.DeletePipeArgs.a.Activiated = true
				);
				
				assert "No Subscribe and UnSubscribe at the same time": not(Core.SBAPI.SubscribeArgs.a.Activiated = true
					and Core.SBAPI.UnsubscribeArgs.a.Activiated = true
				);
				assert "Send Evt or Msg": not (Core.SBAPI.MsgInput.Activiated = true and Core.EVSAPI.SendEventArgs.Activiated = true);
				--hs subscribe event always
				eq HS_CANCEL_SUB_EVENT : bool =  (
					Core.SBAPI.UnsubscribeArgs.a.Activiated = true 
					and Core.SBAPI.UnsubscribeArgs.a.PipeId = 5
					and Core.SBAPI.UnsubscribeArgs.a.MsgId = 0
				);
				eq DEL_HS_PIPE : bool =  (Core.SBAPI.DeletePipeArgs.a.Activiated = true and Core.SBAPI.DeletePipeArgs.a.AppId = 5);
				
				--initially, we set the pipe for hs active,and make it subscribe event, and keep it  on
				assert "keep hs monitoring event": 
				(
					(Core.SBAPI.CreatePipeArgs.a.Activiated = true and Core.SBAPI.CreatePipeArgs.a.AppId = 5) and 
					(Core.SBAPI.SubscribeArgs.a.Activiated = true and Core.SBAPI.SubscribeArgs.a.MsgId = 0 and Core.SBAPI.SubscribeArgs.a.PipeId = 5)
				) -> not(HS_CANCEL_SUB_EVENT or DEL_HS_PIPE);
				
				--assumes for evs
				assert "No register and unregister at the same time":
			    not(Core.EVSAPI.RegisterArgs.a.Activiated = true  and Core.EVSAPI.UnregisterArgs.a.Activiated = true );
				
				
				--assumes for es	
				--we use lock to sychronize the operation to shared data,such as Pipe info and Route info
				--for initial stage, forbid all func call,(still prepared)
				assert "initialize all func":(Core.ESAPI.RegisterAppArgs.a.Activiated = false
					and Core.ESAPI.DeleteAppArgs.a.Activiated = false
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false) -> true;
					
				assert "No two of Register and Delete  and Restart at the same time": 
				(	
					Core.ESAPI.RegisterAppArgs.a.Activiated = true
					and Core.ESAPI.DeleteAppArgs.a.Activiated = false
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or 
				(	
					Core.ESAPI.RegisterAppArgs.a.Activiated = false
					and Core.ESAPI.DeleteAppArgs.a.Activiated = true
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or 
				(	
					Core.ESAPI.RegisterAppArgs.a.Activiated = false
					and Core.ESAPI.DeleteAppArgs.a.Activiated = false
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = true
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				)
				or
				(	
					Core.ESAPI.RegisterAppArgs.a.Activiated = false
					and Core.ESAPI.DeleteAppArgs.a.Activiated = false
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = true
				)
				or
				(	
					Core.ESAPI.RegisterAppArgs.a.Activiated = false
					and Core.ESAPI.DeleteAppArgs.a.Activiated = false
					and Core.ESAPI.RestartAppArgs.ES_RestartApp.Activiated = false
					and Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp.Activiated = false
				);

**};
	   		
	   		annex safety{**
	   			analyze : max 2 fault
	   		**};
end Surf.impl;
end Surf;


			------------------------------Function call----------------------
--			ES_RestartApp_RestartApp: feature group ES.ESAPI.RestartAppArgs.RestartApp <-> Core.ESAPI.RestartAppArgs.ES_RestartApp;
--			HS_MonitorApplications_RestartApp: feature group HS.ESAPI.RestartAppArgs.MonitorApplications_SB 
--				<-> Core.ESAPI.RestartAppArgs.HS_MonitorApplications_RestartApp;
--			
--			ES_Default_SendEvent: feature group ES.EVSAPI.SendEventArgs.Default <-> Core.EVSAPI.SendEventArgs.ES_Default;
--			SB_Default_SendEvent: feature group SB.EVSAPI.SendEventArgs.Default <-> Core.EVSAPI.SendEventArgs.SB_Default;
--			EVS_Default_SendEvent: feature group EVS.EVSAPI.SendEventArgs.Default <-> Core.EVSAPI.SendEventArgs.EVS_Default;
--			TIME_Default_SendEvent: feature group TIME.EVSAPI.SendEventArgs.Default <-> Core.EVSAPI.SendEventArgs.TIME_Default;
--			HS_Default_SendEvent:  feature group HS.EVSAPI.SendEventArgs.Default <-> Core.EVSAPI.SendEventArgs.HS_Default;
--			ES_RestartApp_SendEvent: feature group ES.EVSAPI.SendEventArgs.RestartApp <-> Core.EVSAPI.SendEventArgs.ES_RestartApp;
	