package ES_App
public
	with Component;
	with ES_Sugar;
	with ES_Command;
	with ES_Base_Task;
	with ES_Base_IO;
	with Base_Types;
	
	thread ESAPP extends Component::Component
		features
			EVSAPI: refined to feature group ES_Sugar::EVSAPIOutput;
			ESAPI: refined to feature group ES_Sugar::ESAPIOutput;			
			AppRecord: feature group ES_Base_IO::AppRecordInput;
			
			--control common app
			--send cmd to app, app control its state, something ridiculous,need to change
			HSControlCommand: out data port Base_Types::Integer;
		annex agree{**
			-- cmd to call * RestartApp
			guarantee "cmd to call * RestartApp": true ->  (Command.MsgId = 0 and Command.EvtId = 0) =>
			ESAPI.RestartAppArgs.RestartApp.AppId = Command.AppId;
			
			--check appstate, send event to restart
			guarantee "check es": true ->  AppRecord.ES.StateRecord.AppState = 1 => 
			EVSAPI.SendEventArgs.RestartApp.AppId = 0;
			guarantee "check sb": true ->  AppRecord.SB.StateRecord.AppState = 1 => 
			EVSAPI.SendEventArgs.RestartApp.AppId = 1;
			guarantee "check evs": true ->  AppRecord.EVS.StateRecord.AppState = 1 => 
			EVSAPI.SendEventArgs.RestartApp.AppId = 2; 
			guarantee "check time": true ->  AppRecord.Time1.StateRecord.AppState = 1 => 
			EVSAPI.SendEventArgs.RestartApp.AppId = 3;			
			guarantee "check hs": true ->  AppRecord.HS_APP.StateRecord.AppState = 1 => 
			EVSAPI.SendEventArgs.RestartApp.AppId = 5;
			
		**};
	end ESAPP;
	
	thread implementation ESAPP.impl extends Component::Component.default
		subcomponents
			Medium: refined to abstract ES_Sugar::Medium;
			Checker: refined to abstract ES_Sugar::Checker;
			CommandRouter: refined to abstract ES_Command::CommandRouter;
			-------------Command processor
			RestartApp: abstract ES_Command::RestartAppProcessor;
			-------------Base task
			ScanAppTable: abstract ES_Base_Task::ScanAppTable;
		connections
			CheckerResult: port Checker.Result -> ScanAppTable.Execution;
			
			----------------Route connection
			RestartAppCommand: port CommandRouter.RestartApp -> RestartApp.Command;
			
			----------------Medium API Out
			MediumESAPI: feature group Medium.ESAPI -> ESAPI;
			
			----------------Task data needed
			ScanAppTable_AppRecord: feature group AppRecord -> ScanAppTable.AppRecord;
			
			----------------Checker result in
			RestartAppResult: port RestartApp.Result -> Checker.RestartAppResult;
			
			----------------Medium processor api call collecttion connection			
			RestartApp_SendEvent: feature group RestartApp.SendEvent <-> Medium.EVSAPIIn.SendEventCollection.RestartApp;
			RestartApp_RestartApp: feature group RestartApp.RestartApp <-> Medium.ESAPIIn.RestartAppCollection.RestartApp;
			
			-------------------Control Command----------------
			HSControlCommandConnection: port ScanAppTable.HSControlCommand -> HSControlCommand;
	end ESAPP.impl;
end ES_App;