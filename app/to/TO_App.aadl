package TO_App
public
	with Component;
	with TO_Sugar;
	with TO_Command;
	with ES_Arg_IO;
	with Core_Types;

	thread TOApp extends Component::AppComponent
		features
			SBAPI: refined to feature group TO_Sugar::SBAPIOutput;
			ESAPI: refined to feature group ES_Arg_IO::R_RunLoopArgs;
			TelemetryOutput: out data port Core_Types::Base_struct.SURF_SB_Msg_t;
		annex agree{**
			guarantee "deliver telemetry data": true -> (
				TelemetryOutput = Command
			);
			guarantee "update heart beat by runloop": true -> ESAPI.CI.Activiated = true;
			
		**};
		annex safety{**
			 fault crash_fault2 "component crash":  faults.crash_seu {
			inputs: val_in <- ESAPI.CI.Activiated;     
			outputs: ESAPI.CI.Activiated <- val_out;    
         	probability: 1.0E-5 ;
			duration: permanent;
			}
		**};
	end TOApp;

	thread implementation TOApp.impl extends Component::AppComponent.default
		subcomponents
			Medium: refined to abstract TO_Sugar::Medium;
			Checker: refined to abstract TO_Sugar::Checker;
			CommandRouter: refined to abstract TO_Command::CommandRouter;
				-------------Command processor
			SendOutData: abstract TO_Command::SendOutDataProcessor;
		connections
				----------------Route connection
			SendOutDataCommand: port CommandRouter.SendOutData -> SendOutData.Command;
				----------------Checker result in
			SendOutDataResult: port SendOutData.Result -> Checker.SendOutDataResult;
				----------------Medium processor api call collecttion connection
			SendOutData_SendMsg: feature group SendOutData.SendMsg <-> Medium.SBAPIIn.SendMsgCollection.SendOutData;
	end TOApp.impl;
end TO_App;