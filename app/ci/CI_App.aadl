package CI_App
public
	with Component;
	with CI_Sugar;
	with CI_Command;
	with ES_Arg_IO;


	thread CIAPP extends Component::AppComponent
		features
			SBAPI: refined to feature group CI_Sugar::SBAPIOutput;
			ESAPI: refined to feature group ES_Arg_IO::R_RunLoopArgs;
		annex agree{**
				
			guarantee "deliver ground cmd": true -> (
				Command.MsgId <> 0 => SBAPI.SendMsgArgs.Activiated = true and 
				SBAPI.SendMsgArgs.Msg = Command
			);
			guarantee "update heart beat by runloop": true -> ESAPI.CI.Activiated = true;
			
		**};
		annex safety{**
			 fault crash_fault1 "component crash":  faults.crash_seu {
			inputs: val_in <- ESAPI.CI.Activiated;     
			outputs: ESAPI.CI.Activiated <- val_out;    
         	probability: 1.0E-5 ;
			duration: permanent;
			}
		**};
	end CIAPP;

	thread implementation CIAPP.impl extends Component::AppComponent.default
		subcomponents
			Medium: refined to abstract CI_Sugar::Medium;
			Checker: refined to abstract CI_Sugar::Checker;
			CommandRouter: refined to abstract CI_Command::CommandRouter;
				-------------Command processor
			SendOutData: abstract CI_Command::SendOutDataProcessor;
		connections
				----------------Route connection
			SendOutDataCommand: port CommandRouter.SendOutData -> SendOutData.Command;
				----------------Checker result in
			SendOutDataResult: port SendOutData.Result -> Checker.SendOutDataResult;
				----------------Medium processor api call collecttion connection
			SendOutData_SendMsg: feature group SendOutData.SendMsg <-> Medium.SBAPIIn.SendMsgCollection.SendOutData;
	end CIAPP.impl;
end CI_App;